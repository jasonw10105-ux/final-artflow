// src/types/database.types.ts
// This file should ideally be generated by `supabase gen types typescript --local > src/types/database.types.ts`
// Last manually updated: 2025-09-04 (to consolidate types and match provided schema)

// Helper types for JSONB columns, assuming specific structures
export type LocationJson = { city?: string; country?: string; street?: string; zipcode?: string; state?: string; };
export type SocialLinkJson = { platform: string; url: string; details?: string; };
export type DimensionsJson = { width?: number | null; height?: number | null; depth?: number | null; unit?: 'cm' | 'inch' | 'variable' | null; };
export type DateInfoJson = { type: 'full_date' | 'year_only' | 'date_range' | 'circa'; date_value?: string | null; start_date?: string | null; end_date?: string | null; };
export type SignatureInfoJson = { is_signed?: boolean | null; location?: string | null; details?: string | null; };
export type FramingInfoJson = { is_framed?: boolean | null; details?: string | null; is_framing_optional?: boolean | null; };
export type EditionInfoJson = { is_edition?: boolean | null; numeric_size?: number | null; ap_size?: number | null; sold_editions?: string[] | null; };
export type HistoricalEntryJson = { id: string; year: number | null; description: string; };

// Generic helper for Insert/Update types (making all fields optional for flexibility)
type GenerateInsert<T extends Record<string, any>> = Partial<T>;
type GenerateUpdate<T extends Record<string, any>> = Partial<T>;

export type Database = {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string; // UUID from auth.users
          updated_at: string | null;
          username: string | null;
          full_name: string | null;
          avatar_url: string | null;
          website: string | null;
          role: 'artist' | 'collector' | 'both' | null;
          first_name: string | null;
          last_name: string | null;
          display_name: string | null;
          short_bio: string | null;
          artist_statement: string | null;
          contact_number: string | null;
          location: LocationJson | null;
          social_links: SocialLinkJson[] | null;
          slug: string | null;
          profile_completed: boolean | null;
          default_has_certificate_of_authenticity: boolean | null;
          logo_url: string | null; // Added based on errors
          coa_settings: Json | null; // Added based on errors
          is_collection_public: boolean | null; // Added based on errors
          collector_lists: Json[] | null; // Added based on errors
        };
        Insert: GenerateInsert<Database['public']['Tables']['profiles']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['profiles']['Row']>;
      };
      artworks: {
        Row: {
          id: string;
          user_id: string;
          created_at: string | null;
          updated_at: string | null;
          slug: string | null;
          title: string | null;
          description: string | null;
          price: number | null;
          status: 'pending' | 'available' | 'on_hold' | 'sold';
          is_price_negotiable: boolean | null;
          min_price: number | null;
          max_price: number | null;
          dimensions: DimensionsJson | null;
          location: string | null; // TEXT column, stores JSON string
          medium: string | null;
          date_info: DateInfoJson | null;
          signature_info: SignatureInfoJson | null;
          framing_info: FramingInfoJson | null;
          provenance: string | null;
          currency: string | null;
          edition_info: EditionInfoJson | null;
          genre: string | null;
          dominant_colors: string[] | null;
          keywords: string[] | null;
          subject: string | null;
          orientation: string | null;
          inventory_number: string | null;
          private_note: string | null;
          provenance_notes: string | null;
          exhibitions: HistoricalEntryJson[] | null;
          literature: HistoricalEntryJson[] | null;
          has_certificate_of_authenticity: boolean | null;
          certificate_of_authenticity_details: string | null;
          condition: string | null;
          condition_notes: string | null;
          rarity: string | null;
          framing_status: string | null;
          primary_image_url: string | null;
          embedding: string | null; // public.vector maps to string | null
        };
        Insert: GenerateInsert<Database['public']['Tables']['artworks']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['artworks']['Row']>;
      };
      artwork_images: {
        Row: {
          id: string;
          artwork_id: string;
          image_url: string;
          watermarked_image_url: string | null;
          visualization_image_url: string | null;
          position: number;
          is_primary: boolean;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['artwork_images']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['artwork_images']['Row']>;
      };
      catalogues: {
        Row: {
          id: string;
          user_id: string;
          created_at: string | null;
          updated_at: string | null;
          title: string | null;
          description: string | null;
          slug: string | null;
          is_published: boolean;
          is_system_catalogue: boolean;
          cover_artwork_id: string | null;
          cover_image_url: string | null;
          access_type: 'public' | 'password_protected' | 'restricted_audience';
          password: string | null;
          scheduled_send_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['catalogues']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['catalogues']['Row']>;
      };
      artwork_catalogue_junction: {
        Row: {
          id: string;
          artwork_id: string;
          catalogue_id: string;
          position: number;
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['artwork_catalogue_junction']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['artwork_catalogue_junction']['Row']>;
      };
      contacts: {
        Row: {
          id: string;
          user_id: string;
          created_at: string | null;
          updated_at: string | null;
          full_name: string;
          email: string;
          phone_number: string | null;
          address: LocationJson | null;
          notes: string | null;
          purchase_intent_score: number | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['contacts']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['contacts']['Row']>;
      };
      contact_tags: {
        Row: {
          id: string;
          contact_id: string;
          tag_id: string;
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['contact_tags']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['contact_tags']['Row']>;
      };
      tags: {
        Row: {
          id: string;
          user_id: string;
          name: string;
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['tags']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['tags']['Row']>;
      };
      catalogue_audience_junction: {
        Row: {
          id: string;
          catalogue_id: string;
          contact_id: string;
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['catalogue_audience_junction']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['catalogue_audience_junction']['Row']>;
      };
      sales: {
        Row: {
          id: string;
          artist_id: string;
          artwork_id: string;
          collector_id: string | null;
          sale_price: number;
          currency: string;
          sale_date: string;
          shipping_address: LocationJson | null;
          status: 'pending' | 'completed' | 'cancelled' | 'refunded';
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['sales']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['sales']['Row']>;
      };
      conversations: {
        Row: {
          id: string;
          artist_id: string;
          inquirer_id: string;
          artwork_id: string | null;
          last_message_at: string;
          artist_unread: boolean;
          inquirer_unread: boolean;
          is_blocked: boolean;
          block_reason: string | null;
          status: 'open' | 'archived' | 'resolved' | 'spam';
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['conversations']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['conversations']['Row']>;
      };
      messages: {
        Row: {
          id: string;
          conversation_id: string;
          sender_id: string;
          content: string;
          created_at: string | null;
          is_read: boolean;
        };
        Insert: GenerateInsert<Database['public']['Tables']['messages']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['messages']['Row']>;
      };
      inquiries: {
        Row: {
          id: string;
          artwork_id: string;
          artist_id: string;
          inquirer_id: string | null;
          inquirer_email: string;
          inquirer_name: string;
          message: string;
          created_at: string | null;
          status: 'new' | 'contacted' | 'archived' | 'spam';
          conversation_id: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['inquiries']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['inquiries']['Row']>;
      };
      recently_viewed_artworks: {
        Row: {
          id: string;
          user_id: string;
          artwork_id: string;
          viewed_at: string;
        };
        Insert: GenerateInsert<Database['public']['Tables']['recently_viewed_artworks']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['recently_viewed_artworks']['Row']>;
      };
      notifications: {
        Row: {
          id: string;
          user_id: string;
          created_at: string;
          type: string;
          message: string;
          link_url: string | null;
          is_read: boolean;
          related_entity: 'artwork' | 'artist' | 'catalogue' | 'digest' | null;
          related_id: string | null;
          metadata: Json | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['notifications']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['notifications']['Row']>;
      };
      follows: {
        Row: {
          id: string;
          follower_id: string;
          followed_id: string;
          created_at: string;
        };
        Insert: GenerateInsert<Database['public']['Tables']['follows']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['follows']['Row']>;
      };
      likes: {
        Row: {
          id: string;
          user_id: string;
          artwork_id: string;
          created_at: string;
        };
        Insert: GenerateInsert<Database['public']['Tables']['likes']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['likes']['Row']>;
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      artist_insights: {
        Args: { artist_uuid: string };
        Returns: {
          profileViews: number;
          artworkViews: number;
          inquiries: number;
          followers: { created_at: string }[];
          collectorStats: { purchases: number }[];
          shares: { count: number }[];
          sales: { price: number; genre: string }[];
          trendingArtworks: { id: string; title: string; score: number }[];
        };
      };
      get_catalogues_with_status_counts: {
        Args: { auth_user_id: string };
        Returns: Array<{
          id: string;
          title: string | null;
          slug: string | null;
          is_published: boolean;
          is_system_catalogue: boolean;
          cover_image_url: string | null;
          created_at: string | null;
          total_count: number;
          available_count: number;
          sold_count: number;
        }>;
      };
      block_conversation: {
        Args: {
          p_conversation_id: string;
          p_artist_id: string;
          p_inquirer_id: string;
          p_reason: string;
        };
        Returns: boolean;
      };
      generate_unique_slug: {
        Args: { input_text: string; table_name: string };
        Returns: string;
      };
      update_artwork_edition_sale: {
        Args: { p_artwork_id: string; p_edition_identifier: string; p_is_sold: boolean };
        Returns: boolean;
      };
      get_artwork_insights: {
        Args: { p_artwork_id: string };
        Returns: { view_count_wow: number; list_add_count: number };
      };
      get_vector_similar_artworks: {
        Args: { p_artwork_id: string; p_match_count: number };
        Returns: Array<{ id: string; title: string; image_url: string; slug: string; artist_id: string; artist_full_name: string; artist_slug: string }>;
      };
      get_personalized_artworks: {
        Args: { p_collector_id: string | undefined; p_limit: number; p_offset: number }; // p_collector_id can be undefined
        Returns: Array<{
          id: string; title: string; slug: string; price: number; currency: string;
          image_url: string; artist_id: string; artist_full_name: string; artist_slug: string;
          recommendation_reason: string | null; rank_score: number | null;
        }>;
      };
      get_artist_discovery_lists: {
        Args: { p_collector_id: string | undefined };
        Returns: {
          rising_talent: Array<{ id: string; full_name: string; slug: string; avatar_url: string; follower_count: number; artwork_previews: Array<{ id: string; image_url: string; slug: string; }>; }>;
          trending_artists: Array<{ id: string; full_name: string; slug: string; avatar_url: string; follower_count: number; artwork_previews: Array<{ id: string; image_url: string; slug: string; }>; }>;
          personalized_suggestions: Array<{ id: string; full_name: string; slug: string; avatar_url: string; follower_count: number; artwork_previews: Array<{ id: string; image_url: string; slug: string; }>; }>;
        };
      };
      get_sales_for_collector: {
        Args: { p_collector_id: string };
        Returns: Array<{
          id: string; sale_price: number; currency: string; sale_date: string;
          artwork: {
            title: string; slug: string; image_url: string;
            artist: { full_name: string; slug: string; } | null;
          } | null;
        }>;
      };
      get_collector_collection_artworks: {
        Args: { p_collector_id: string };
        Returns: Array<{
          id: string; title: string; slug: string; image_url: string;
          artist: { full_name: string; slug: string; } | null;
          year: string | null;
        }>;
      };
      get_followed_artists_for_collector: {
        Args: { p_collector_id: string };
        Returns: Array<{
          id: string; full_name: string; slug: string; avatar_url: string;
        }>;
      };
      get_liked_artworks_for_collector: {
        Args: { p_collector_id: string };
        Returns: Array<{
          id: string; title: string; slug: string; image_url: string; status: string;
          artist_id: string; artist_full_name: string; artist_slug: string;
        }>;
      };
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

// --- EXPORT DIRECT ROW TYPES FOR EASIER USE ---
// These aliases simplify type references throughout the application.
export type ProfileRow = Database['public']['Tables']['profiles']['Row'];
export type ArtworkRow = Database['public']['Tables']['artworks']['Row'];
export type ArtworkImageRow = Database['public']['Tables']['artwork_images']['Row'];
export type CatalogueRow = Database['public']['Tables']['catalogues']['Row'];
export type ArtworkCatalogueJunctionRow = Database['public']['Tables']['artwork_catalogue_junction']['Row']; // Added
export type ContactRow = Database['public']['Tables']['contacts']['Row']; // Added
export type ContactTagRow = Database['public']['Tables']['contact_tags']['Row']; // Added
export type TagRow = Database['public']['Tables']['tags']['Row']; // Added
export type CatalogueAudienceJunctionRow = Database['public']['Tables']['catalogue_audience_junction']['Row']; // Added
export type SaleRow = Database['public']['Tables']['sales']['Row'];
export type ConversationRow = Database['public']['Tables']['conversations']['Row'];
export type MessageRow = Database['public']['Tables']['messages']['Row'];
export type InquiryRow = Database['public']['Tables']['inquiries']['Row']; // Added
export type RecentlyViewedArtworkRow = Database['public']['Tables']['recently_viewed_artworks']['Row']; // Added
export type NotificationRow = Database['public']['Tables']['notifications']['Row'];
export type FollowRow = Database['public']['Tables']['follows']['Row'];
export type LikeRow = Database['public']['Tables']['likes']['Row'];


// --- Generic JSON type for metadata, etc. ---
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];