// src/types/database.types.ts
// This file should be generated by `supabase gen types typescript --local > src/types/database.types.ts`
// Last manually updated: 2025-09-03 (to match provided schema, add JSONB types, and export Row types)

// Helper types for JSONB columns, assuming specific structures
export type LocationJson = { city?: string; country?: string; }; // Exported for use in other types if needed
export type SocialLinkJson = { platform: string; url: string; }; // Exported for use in other types if needed
export type DimensionsJson = { width?: number | null; height?: number | null; depth?: number | null; unit?: 'cm' | 'inch' | 'variable' | null; };
export type DateInfoJson = { type: 'full_date' | 'year_only' | 'date_range' | 'circa'; date_value?: string | null; start_date?: string | null; end_date?: string | null; };
export type SignatureInfoJson = { is_signed?: boolean | null; location?: string | null; details?: string | null; };
export type FramingInfoJson = { is_framed?: boolean | null; details?: string | null; is_framing_optional?: boolean | null; };
export type EditionInfoJson = { is_edition?: boolean | null; numeric_size?: number | null; ap_size?: number | null; sold_editions?: string[] | null; };
export type HistoricalEntryJson = { id: string; year: number | null; description: string; }; // Matches type in ArtworkForm

// Generic helper for Insert/Update types
type GenerateInsert<T extends Record<string, any>> = Partial<T>; // Making all fields optional on insert for flexibility
type GenerateUpdate<T extends Record<string, any>> = Partial<T>; // Making all fields optional on update for flexibility

export type Database = {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string; // UUID from auth.users
          updated_at: string | null;
          username: string | null;
          full_name: string | null;
          avatar_url: string | null;
          website: string | null;
          role: 'artist' | 'collector' | 'both' | null;
          first_name: string | null;
          last_name: string | null;
          display_name: string | null;
          short_bio: string | null;
          artist_statement: string | null;
          contact_number: string | null;
          location: LocationJson | null; // Using helper type
          social_links: SocialLinkJson[] | null; // Using helper type
          slug: string | null; // Unique URL identifier for public profile
          profile_completed: boolean | null; // Common profile field
          default_has_certificate_of_authenticity: boolean | null; // Common profile field
        };
        Insert: GenerateInsert<Database['public']['Tables']['profiles']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['profiles']['Row']>;
      };
      artworks: {
        Row: {
          id: string;
          user_id: string; // Artist ID (FK to profiles.id)
          created_at: string | null;
          updated_at: string | null;
          slug: string | null;
          title: string | null;
          description: string | null;
          price: number | null;
          status: 'pending' | 'available' | 'on_hold' | 'sold'; // Matched to ArtworkStatus enum
          is_price_negotiable: boolean | null;
          min_price: number | null;
          max_price: number | null;
          dimensions: DimensionsJson | null; // Using helper type
          location: string | null; // Specific to artwork, e.g., 'Gallery A, City' (jsonb was in old comment)
          medium: string | null;
          date_info: DateInfoJson | null; // Using helper type
          signature_info: SignatureInfoJson | null; // Using helper type
          framing_info: FramingInfoJson | null; // Using helper type
          provenance: string | null;
          currency: string | null;
          edition_info: EditionInfoJson | null; // Using helper type
          genre: string | null;
          dominant_colors: string[] | null;
          keywords: string[] | null;
          subject: string | null;
          orientation: string | null; // Using string for flexibility
          inventory_number: string | null;
          private_note: string | null;
          provenance_notes: string | null;
          exhibitions: HistoricalEntryJson[] | null; // Using helper type, array of JSONB
          literature: HistoricalEntryJson[] | null; // Using helper type, array of JSONB
          has_certificate_of_authenticity: boolean | null;
          certificate_of_authenticity_details: string | null;
          condition: string | null; // Using string for flexibility
          condition_notes: string | null;
          rarity: string | null; // Using string for flexibility
          framing_status: string | null; // Using string for flexibility
          primary_image_url: string | null; // Added based on migration
          embedding: string | null; // `public.vector` maps to `string | null` in TS
        };
        Insert: GenerateInsert<Database['public']['Tables']['artworks']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['artworks']['Row']>;
      };
      artwork_images: {
        Row: {
          id: string;
          artwork_id: string; // FK to artworks.id
          image_url: string;
          watermarked_image_url: string | null;
          visualization_image_url: string | null;
          position: number;
          is_primary: boolean;
          created_at: string | null;
          updated_at: string | null; // Added based on your `CREATE TABLE` and trigger
        };
        Insert: GenerateInsert<Database['public']['Tables']['artwork_images']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['artwork_images']['Row']>;
      };
      catalogues: {
        Row: {
          id: string;
          user_id: string; // Artist ID (FK to profiles.id)
          created_at: string | null;
          updated_at: string | null;
          title: string | null;
          description: string | null;
          slug: string | null;
          is_published: boolean;
          is_system_catalogue: boolean; // e.g., "All Available Artworks"
          cover_artwork_id: string | null; // FK to artworks.id
          cover_image_url: string | null; // Denormalized for convenience from cover_artwork_id's primary image
          access_type: 'public' | 'password_protected' | 'restricted_audience';
          password: string | null; // Hashed password
          scheduled_send_at: string | null; // UTC timestamp
        };
        Insert: GenerateInsert<Database['public']['Tables']['catalogues']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['catalogues']['Row']>;
      };
      artwork_catalogue_junction: {
        Row: {
          id: string;
          artwork_id: string; // FK to artworks.id
          catalogue_id: string; // FK to catalogues.id
          position: number; // Order within the catalogue
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['artwork_catalogue_junction']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['artwork_catalogue_junction']['Row']>;
      };
      contacts: {
        Row: {
          id: string;
          user_id: string; // Artist ID (FK to profiles.id)
          created_at: string | null;
          updated_at: string | null;
          full_name: string;
          email: string;
          phone_number: string | null;
          address: LocationJson | null; // Detailed address
          notes: string | null;
          purchase_intent_score: number | null; // Added: e.g., 1-100, calculated or manual
        };
        Insert: GenerateInsert<Database['public']['Tables']['contacts']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['contacts']['Row']>;
      };
      contact_tags: { // Junction table for contacts and tags
        Row: {
          id: string;
          contact_id: string; // FK to contacts.id
          tag_id: string; // FK to tags.id
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['contact_tags']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['contact_tags']['Row']>;
      };
      tags: { // Master tags table
        Row: {
          id: string;
          user_id: string; // Artist ID (for user-defined tags)
          name: string;
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['tags']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['tags']['Row']>;
      };
      catalogue_audience_junction: {
        Row: {
          id: string;
          catalogue_id: string; // FK to catalogues.id
          contact_id: string; // FK to contacts.id
          created_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['catalogue_audience_junction']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['catalogue_audience_junction']['Row']>;
      };
      sales: {
        Row: {
          id: string;
          artist_id: string; // FK to profiles.id
          artwork_id: string; // FK to artworks.id
          collector_id: string | null; // FK to profiles.id (if collector is a registered user)
          sale_price: number;
          currency: string;
          sale_date: string; // ISO date string
          shipping_address: LocationJson | null; // Address where artwork was shipped
          status: 'pending' | 'completed' | 'cancelled' | 'refunded';
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['sales']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['sales']['Row']>;
      };
      conversations: {
        Row: {
          id: string;
          artist_id: string; // FK to profiles.id
          inquirer_id: string; // FK to profiles.id (or a dummy profile for guests)
          artwork_id: string | null; // FK to artworks.id (if conversation is about an artwork)
          last_message_at: string; // For sorting and 'new' indicators
          artist_unread: boolean;
          inquirer_unread: boolean;
          is_blocked: boolean; // Artist blocked inquirer
          block_reason: string | null; // Reason for blocking
          status: 'open' | 'archived' | 'resolved' | 'spam'; // Added: for better management
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: GenerateInsert<Database['public']['Tables']['conversations']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['conversations']['Row']>;
      };
      messages: {
        Row: {
          id: string;
          conversation_id: string; // FK to conversations.id
          sender_id: string; // FK to profiles.id
          content: string;
          created_at: string | null;
          is_read: boolean; // For sender to know if message was seen
        };
        Insert: GenerateInsert<Database['public']['Tables']['messages']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['messages']['Row']>;
      };
      inquiries: { // Table for initial inquiries before a full conversation might be spun up
        Row: {
          id: string;
          artwork_id: string; // FK to artworks.id
          artist_id: string; // FK to profiles.id
          inquirer_id: string | null; // FK to profiles.id (if known user, else null)
          inquirer_email: string;
          inquirer_name: string;
          message: string;
          created_at: string | null;
          status: 'new' | 'contacted' | 'archived' | 'spam';
          conversation_id: string | null; // Link to conversation if one is created from inquiry
        };
        Insert: GenerateInsert<Database['public']['Tables']['inquiries']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['inquiries']['Row']>;
      };
      recently_viewed_artworks: { // For collector tracking
        Row: {
          id: string;
          user_id: string; // FK to profiles.id
          artwork_id: string; // FK to artworks.id
          viewed_at: string;
        };
        Insert: GenerateInsert<Database['public']['Tables']['recently_viewed_artworks']['Row']>;
        Update: GenerateUpdate<Database['public']['Tables']['recently_viewed_artworks']['Row']>;
      };
    };
    Views: {
      [_ in never]: never; // Placeholder for SQL views
    };
    Functions: {
      artist_insights: {
        Args: { artist_uuid: string };
        Returns: {
          profileViews: number;
          artworkViews: number;
          inquiries: number;
          followers: { created_at: string }[]; // Simplified
          collectorStats: { purchases: number }[]; // Simplified
          shares: { count: number }[]; // Simplified
          sales: { price: number; genre: string }[]; // Simplified
          trendingArtworks: { id: string; title: string; score: number }[];
        };
      };
      get_catalogues_with_status_counts: {
        Args: { auth_user_id: string };
        Returns: Array<{
          id: string;
          title: string | null;
          slug: string | null;
          is_published: boolean;
          is_system_catalogue: boolean;
          cover_image_url: string | null;
          created_at: string | null;
          total_count: number;
          available_count: number;
          sold_count: number;
        }>;
      };
      block_conversation: {
        Args: {
          p_conversation_id: string;
          p_artist_id: string;
          p_inquirer_id: string;
          p_reason: string;
        };
        Returns: boolean;
      };
      generate_unique_slug: {
        Args: { input_text: string; table_name: string };
        Returns: string;
      };
      update_artwork_edition_sale: {
        Args: { p_artwork_id: string; p_edition_identifier: string; p_is_sold: boolean };
        Returns: boolean;
      };
      get_artwork_insights: {
        Args: { p_artwork_id: string };
        Returns: { view_count_wow: number; list_add_count: number };
      };
      get_vector_similar_artworks: {
        Args: { p_artwork_id: string; p_match_count: number };
        Returns: Array<{ id: string; title: string; image_url: string; slug: string; artist_id: string; artist_full_name: string; artist_slug: string }>;
      };
    };
    Enums: {
      [_ in never]: never; // Placeholder for SQL enums
    };
    CompositeTypes: {
      [_ in never]: never; // Placeholder for SQL composite types
    };
  };
};

// --- EXPORT DIRECT ROW TYPES FOR EASIER USE ---
export type ProfileRow = Database['public']['Tables']['profiles']['Row'];
export type ArtworkRow = Database['public']['Tables']['artworks']['Row'];
export type ArtworkImageRow = Database['public']['Tables']['artwork_images']['Row'];
export type CatalogueRow = Database['public']['Tables']['catalogues']['Row'];

// Re-export original generic types for direct access from supabase client (e.g., Tables<'profiles'>)
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type TablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert'];
export type TablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update'];
export type FunctionsReturn<T extends keyof Database['public']['Functions']> = Database['public']['Functions'][T]['Returns'];